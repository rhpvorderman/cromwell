###########################################
# Cromwell Reference Local Config Include #
###########################################

# This is the reference config file for the Local backend config block.
# It must be included into a application level configuration under backend.providers.<backend>.config

run-in-background = true
runtime-attributes = """
  String? docker
  String? docker_user
"""
submit = "${job_shell} ${script}"
submit-docker = """
  # make sure there is no preexisting Docker CID file
  rm -f ${docker_cid}
  # run as in the original configuration without --rm flag (will remove later)
  docker run \
    --cidfile ${docker_cid} \
    -i \
    ${"--user " + docker_user} \
    --entrypoint ${job_shell} \
    -v ${cwd}:${docker_cwd}:delegated \
    ${docker} ${docker_script}

  # get the return code (working even if the container was detached)
  rc=$(docker wait `cat ${docker_cid}`)

  # remove the container after waiting
  docker rm `cat ${docker_cid}`

  # return exit code
  exit $rc
"""

kill-docker = "docker kill `cat ${docker_cid}`"

# Root directory where Cromwell writes job results.  This directory must be
# visible and writeable by the Cromwell process as well as the jobs that Cromwell
# launches.
root = "cromwell-executions"

filesystems {
  local {
    localization: [
      "hard-link", "soft-link", "copy"
    ]

    caching {
      # When copying a cached result, what type of file duplication should occur.
      # possible values: "hard-link", "soft-link", "copy", "cached-copy".
      # For more information check: https://cromwell.readthedocs.io/en/stable/backends/HPC/#shared-filesystem
      # Attempted in the order listed below:
      duplication-strategy: [
        "hard-link", "soft-link", "copy"
      ]

      # Possible values: md5, xxh64, fingerprint, path, path+modtime
      # For extended explanation check: https://cromwell.readthedocs.io/en/stable/Configuring/#call-caching
      # "md5" will compute an md5 hash of the file content.
      # "xxh64" will compute an xxh64 hash of the file content. Much faster than md5
      # "fingerprint" will take last modified time, size and hash the first 10 mb with xxh64 to create a file fingerprint.
      # This strategy will only be effective if the duplication-strategy (above) is set to "hard-link", as copying changes the last modified time.
      # "path" will compute an md5 hash of the file path. This strategy will only be effective if the duplication-strategy (above) is set to "soft-link",
      # in order to allow for the original file path to be hashed.
      # "path+modtime" will compute an md5 hash of the file path and the last modified time. The same conditions as for "path" apply here.
      # Default: "md5"
      hashing-strategy: "md5"

      # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
      # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
      check-sibling-md5: false
    }
  }

  http {}
}

default-runtime-attributes {
  failOnStderr: false
  continueOnReturnCode: 0
}
